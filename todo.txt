- client: receive file, in chunks as to not put entire file into memory as well
  as to not care about packet sequence order.
- client: receive file, missing packets are requested again.
- server: send file, implement a new packet type that is able to send a file
  chunk by itself then refactor send file to use this function. This will be
  used when a packet is dropped and the client re-requests it.
- client: send file, receive errors and successes from server and re-send
  packets if necessary.
    - For example if an ERR packet is received from the server it will indicate
      which chunk, so resend that chunk.
    - Also if there is no ERR or SUC packet from the server after some amount of
      time resent that chunk, continue doing this until the server notifies that
      it has fully written the file successfully
- server: receive file, compute when a file is done being written and probably
  send that back to the client. 

- sendto and recvfrom do not always return the right value. This must not make
  server or client fail
- Check out network emulators for testing sequencing and chunking
